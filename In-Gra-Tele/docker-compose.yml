services:
  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro  # Mount the Telegraf configuration file
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Mount the Docker socket to collect Docker metrics
    depends_on:
      - influxdb
      - nginx
    links:
      - influxdb
      - nginx
    ports:
      - '8125:8125'  # Expose Telegraf's StatsD port
    networks:
      - emqx-network  # Connect the Telegraf container to the emqx-network
      - monitoring  # Connect the Telegraf container to the monitoring network

  telegraf_second:
    image: telegraf
    container_name: telegraf_second
    restart: always
    volumes:
      - ./telegraf/telegraf_second.conf:/etc/telegraf/telegraf.conf:ro  # Mount the second Telegraf configuration file
    depends_on:
      - influxdb
    links:
      - influxdb
    ports:
      - '8126:8126'  # Expose the second Telegraf's StatsD port
    networks:
      - emqx-network
      - monitoring  # Connect the second Telegraf container to the monitoring network

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    volumes:
      - ./nginx:/etc/nginx/conf.d  # Mount the Nginx configuration directory
    ports:
      - '8080:80'  # Expose Nginx on port 8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 2
    networks:
      - monitoring  # Connect the Nginx container to the monitoring network

  influxdb:
    image: influxdb:2-alpine
    container_name: influxdb
    restart: always
    environment:
      - INFLUXDB_DB=influx
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    ports:
      - '8086:8086'  # Expose InfluxDB on port 8086
    volumes:
      - ./influxdb_data:/var/lib/influxdb2  
      
    networks:
      - monitoring  # Connect the InfluxDB container to the monitoring network

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: always
    depends_on:
      - influxdb
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-influxdb-flux-datasource
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_DASHBOARDS_DEFAULT_EDIT=true
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=5s
    links:
      - influxdb
    ports:
      - '3000:3000'  # Expose Grafana on port 3000
    volumes:
      - grafana_data:/var/lib/grafana  # Mount the Grafana data directory
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

    networks:
      - monitoring  # Connect the Grafana container to the monitoring network
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/data
    networks:
      - monitoring

  detect_uuids:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    container_name: detect_uiids

    volumes:
      - ./grafana/dashboards:/app/grafana/dashboards
    depends_on:
      - influxdb
    restart: always
    networks:
      - monitoring
     
volumes:
  grafana_data: {}  # Volume for Grafana data
  influxdb_data: {}  # Volume for InfluxDB data

networks:
  monitoring:
    external: true  # Use an external network named 'monitoring'
  emqx-network:
    external: true  # Use an external network named 'emqx-network'
